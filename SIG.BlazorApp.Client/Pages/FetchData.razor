@page "/fetchdata"
@inject IHttpClientFactory ClientFactory
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<AuthorizeView>
    <Authorized>

        @if (forecasts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>

        }

        @code {
            private WeatherForecast[] forecasts;

            protected override async Task OnInitializedAsync()
            {
                try
                {
                    var token = await sessionStorage.GetItemAsync<tokenContainer>("oidc.user:https://dev-15099932.okta.com/oauth2/default:0oa170e5plBIZCHav5d7");

                    if (string.IsNullOrWhiteSpace(token?.access_token))
                    {
                        Console.WriteLine("Access Token not found");
                        return;
                    }

                    var client = ClientFactory.CreateClient("WebAPI");
                    client.DefaultRequestHeaders.Add("CustomToken", token.access_token);

                    forecasts = await client.GetFromJsonAsync<WeatherForecast[]>("/api/WeatherForecast");
                }/*
                        catch (AccessTokenNotAvailableException exception)
                        {
                            exception.Redirect();
                        } */
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }

            public class tokenContainer
            {
                public string access_token { get; set; }
            }
        }
    </Authorized>
    <NotAuthorized>
        You are not signed in!
    </NotAuthorized>
</AuthorizeView>